Arbitrary Argument Lists
========================

Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple. Before the variable number of arguments, zero or more normal arguments may occur.

.. code-block:: python

    def write_multiple_items(file, separator, *args):
        file.write(separator.join(args))


Unpacking Argument Lists
========================

The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in ``range()`` function expects separate *start* and *stop* arguments. If they are not available separately, write the function call with the ``*``-operator to unpack the arguments out of a list or tuple:

.. code-block:: python

    >>> range(3, 6)             # normal call with separate arguments
    [3, 4, 5]
    >>> args = [3, 6]
    >>> range(*args)            # call with arguments unpacked from a list
    [3, 4, 5]

In the same fashion, dictionaries can deliver keyword arguments with the ``**``-operator:

.. code-block:: python

    >>> def parrot(voltage, state='a stiff', action='voom'):
    ...     print "-- This parrot wouldn't", action,
    ...     print "if you put", voltage, "volts through it.",
    ...     print "E's", state, "!"
    ...
    >>> d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
    >>> parrot(**d)
    -- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !


Lambda Forms
============

By popular demand, a few features commonly found in functional programming languages like Lisp have been added to Python. With the ``lambda`` keyword, small anonymous functions can be created. Hereâ€™s a function that returns the sum of its two arguments: ``lambda a, b: a+b``. Lambda forms can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, lambda forms can reference variables from the containing scope:

.. code-block:: python

    >>> def make_incrementor(n):
    ...     return lambda x: x + n
    ...
    >>> f = make_incrementor(42)
    >>> f(0)
    42
    >>> f(1)
    43


=================
 More on Modules 
=================

A module can contain executable statements as well as function definitions. These statements are intended to initialize the module. They are executed only the *first* time the module is imported somewhere.

Each module has its own private symbol table, which is used as the global symbol table by all functions defined in the module. Thus, the author of a module can use global variables in the module without worrying about accidental clashes with a user’s global variables. On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, ``modname.itemname``.

Modules can import other modules. It is customary but not required to place all ``import`` statements at the beginning of a module (or script, for that matter). The imported module names are placed in the importing module’s global symbol table.

There is a variant of the ``import`` statement that imports names from a module directly into the importing module’s symbol table. For example:

.. code-block:: python

    >>> from fibo import fib, fib2
    >>> fib(500)
    1 1 2 3 5 8 13 21 34 55 89 144 233 377

This does not introduce the module name from which the imports are taken in the local symbol table (so in the example, ``fibo`` is not defined).

There is even a variant to import all names that a module defines:

.. code-block:: python

    >>> from fibo import *
    >>> fib(500)
    1 1 2 3 5 8 13 21 34 55 89 144 233 377

This imports all names except those beginning with an underscore (``_``). The import * form is generally considered to be bad practise as it makes it hard to tell where the names you use in your code come from, *and* you can accidentally overwrite names if you import something that is already defined elsewhere. It can still be useful when working in the console.


Executing Modules as Scripts
============================

When you run a Python module with::

    python fibo.py <arguments>

the code in the module will be executed, just as if you imported it, but with the ``__name__`` set to ``"__main__"``. That means that by adding this code at the end of your module:

.. code-block:: python

    if __name__ == "__main__":
        import sys
        fib(int(sys.argv[1]))

you can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the “main” file::

    $ python fibo.py 50
    1 1 2 3 5 8 13 21 34

(This is something you can't try from inside the **Try Python** tutorial of course...)

If the module is imported, the code is not run:

.. code-block:: python

    >>> import fibo
    >>>

This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).


The Module Search Path
======================

When a module named ``spam`` is imported, the interpreter searches for a file named ``spam.py`` in the current directory, and then in the list of directories specified by the environment variable **PYTHONPATH**. This has the same syntax as the shell variable **PATH**, that is, a list of directory names. When **PYTHONPATH** is not set, or when the file is not found there, the search continues in an installation-dependent default path; on Unix, this is usually ``.:/usr/local/lib/python``.

Actually, modules are searched in the list of directories given by the variable ``sys.path`` which is initialized from the directory containing the input script (or the current directory), **PYTHONPATH** and the installation- dependent default. This allows Python programs that know what they’re doing to modify or replace the module search path. Note that because the directory containing the script being run is on the search path, it is important that the script not have the same name as a standard module, or Python will attempt to load the script as a module when that module is imported. This will generally be an error.

NOTE: In Silverlight ``sys.path`` is set to ``['']``. This allows you to import from any Python files in the Silverlight application. Adding new paths to ``sys.path`` allows you to import from directories contained inside your application (which is really just a zip archive that can contain directories), but this isn't very useful for this tutorial...
============================
 More on Packages
============================

Importing * From a Package
==========================

Now what happens when the user writes from ``sound.effects import *``? Perhaps this should go out to the filesystem, find which submodules are present in the package, and import them all. This could take a *looooong* time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported.

A solution is for the package author to provide an explicit index of the package. The import statement uses the following convention: if a package’s ``__init__.py`` code defines a list named ``__all__``, it is taken to be the list of module names that should be imported when ``from package import *`` is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don’t see a use for importing \* from their package. For example, the file ``sounds/effects/__init__.py`` could contain the following code:

.. code-block:: python

    __all__ = ["echo", "surround", "reverse"]

This would mean that ``from sound.effects import *`` would import the three named submodules of the ``sound`` package.

If ``__all__`` is not defined, the statement ``from sound.effects import *`` does not import all submodules from the package sound.effects into the current namespace; it only ensures that the package ``sound.effects`` has been imported (possibly running any initialization code in ``__init__.py``) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by __init__.py. It also includes any submodules of the package that were explicitly loaded by previous import statements. Consider this code:

.. code-block:: python

    import sound.effects.echo
    import sound.effects.surround
    from sound.effects import *

In this example, the echo and surround modules are imported in the current namespace because they are defined in the ``sound.effects`` package when the ``from...import`` statement is executed. (This also works when ``__all__`` is defined.)

Note that in general the practice of importing \* from a module or package is frowned upon, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions, and certain modules are designed to export only names that follow certain patterns.

Remember, there is nothing wrong with using ``from Package import specific_submodule``! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages.


Intra-package References
========================

The submodules often need to refer to each other. For example, the ``surround`` module might use the ``echo`` module. In fact, such references are so common that the ``import`` statement first looks in the containing package before looking in the standard module search path. Thus, the surround module can simply use ``import echo`` or ``from echo import echofilter``. If the imported module is not found in the current package (the package of which the current module is a submodule), the import statement looks for a top-level module with the given name.

When packages are structured into subpackages (as with the ``sound`` package in the example), you can use absolute imports to refer to submodules of siblings packages. For example, if the module ``sound.filters.vocoder`` needs to use the ``echo`` module in the ``sound.effects`` package, it can use ``from sound.effects import echo``.

Starting with Python 2.5, in addition to the implicit relative imports described above, you can write explicit relative imports with the ``from module import name`` form of import statement. These explicit relative imports use leading dots to indicate the current and parent packages involved in the relative import. From the ``surround`` module for example, you might use:

.. code-block:: python

    from . import echo
    from .. import formats
    from .. filters import equalizer

Note that both explicit and implicit relative imports are based on the name of the current module. Since the name of the main module is always ``"__main__"``, modules intended for use as the main module of a Python application should always use absolute imports.


Packages in Multiple Directories
================================

Packages support one more special attribute, ``__path__``. This is initialized to be a list containing the name of the directory holding the package’s ``__init__.py`` before the code in that file is executed. This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.

While this feature is not often needed, it can be used to extend the set of modules found in a package.
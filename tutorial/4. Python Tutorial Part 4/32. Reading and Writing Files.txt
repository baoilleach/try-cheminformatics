===========================
 Reading and Writing Files
===========================

**NOTE:** File IO doesn't yet work in **Try Python**. In a future version there will be a ``file`` type and ``open`` function that uses in browser storage (``IsolatedStorage``) as a backend.

``open()`` returns a file object, and is most commonly used with two arguments: ``open(filename, mode)``.

.. code-block:: pycon

    >>> f = open('/tmp/workfile', 'w')
    >>> print f
    <open file '/tmp/workfile', mode 'w' at 80a0960>

The first argument is a string containing the filename. The second argument is another string containing a few characters describing the way in which the file will be used. *mode* can be ``'r'`` when the file will only be read, ``'w'`` for only writing (an existing file with the same name will be erased), and ``'a'`` opens the file for appending; any data written to the file is automatically added to the end. ``'r+'`` opens the file for both reading and writing. The *mode* argument is optional; ``'r'`` will be assumed if it’s omitted.

On Windows, ``'b'`` appended to the mode opens the file in binary mode, so there are also modes like ``'rb'``, ``'wb'``, and ``'r+b'``. Windows makes a distinction between text and binary files; the end-of-line characters in text files are automatically altered slightly when data is read or written. This behind-the-scenes modification to file data is fine for ASCII text files, but it’ll corrupt binary data like that in ``JPEG`` or ``EXE`` files. Be very careful to use binary mode when reading and writing such files. On Unix, it doesn’t hurt to append a ``'b'`` to the mode, so you can use it platform-independently for all binary files.


Methods of File Objects
=======================

The rest of the examples in this section will assume that a file object called f has already been created.

To read a file’s contents, call ``f.read(size)``, which reads some quantity of data and returns it as a string. *size* is an optional numeric argument. When size is omitted or negative, the entire contents of the file will be read and returned; it’s your problem if the file is twice as large as your machine’s memory. Otherwise, at most *size* bytes are read and returned. If the end of the file has been reached, ``f.read()`` will return an empty string (``""``).

.. code-block:: pycon

    >>> f.read()
    'This is the entire file.\n'
    >>> f.read()
    ''

``f.readline()`` reads a single line from the file; a newline character (``\n``) is left at the end of the string, and is only omitted on the last line of the file if the file doesn’t end in a newline. This makes the return value unambiguous; if ``f.readline()`` returns an empty string, the end of the file has been reached, while a blank line is represented by ``'\n'``, a string containing only a single newline.

.. code-block:: pycon

    >>> f.readline()
    'This is the first line of the file.\n'
    >>> f.readline()
    'Second line of the file\n'
    >>> f.readline()
    ''

``f.readlines()`` returns a list containing all the lines of data in the file. If given an optional parameter *sizehint*, it reads that many bytes from the file and enough more to complete a line, and returns the lines from that. This is often used to allow efficient reading of a large file by lines, but without having to load the entire file in memory. Only complete lines will be returned.

.. code-block:: pycon

    >>> f.readlines()
    ['This is the first line of the file.\n', 'Second line of the file\n']

An alternative approach to reading lines is to loop over the file object. This is memory efficient, fast, and leads to simpler code:

.. code-block:: pycon

    >>> for line in f:
    ...     print line,

This is the first line of the file.
Second line of the file

The alternative approach is simpler but does not provide as fine-grained control. Since the two approaches manage line buffering differently, they should not be mixed.

``f.write(string)`` writes the contents of *string* to the file, returning ``None``.

.. code-block:: pycon

    >>> f.write('This is a test\n')

To write something other than a string, it needs to be converted to a string first:

.. code-block:: pycon

    >>> value = ('the answer', 42)
    >>> s = str(value)
    >>> f.write(s)

``f.tell()`` returns an integer giving the file object’s current position in the file, measured in bytes from the beginning of the file. To change the file object’s position, use ``f.seek(offset, from_what)``. The position is computed from adding *offset* to a reference point; the reference point is selected by the *from_what* argument. A *from_what* value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point. *from_what* can be omitted and defaults to 0, using the beginning of the file as the reference point.

.. code-block:: pycon

    >>> f = open('/tmp/workfile', 'r+')
    >>> f.write('0123456789abcdef')
    >>> f.seek(5)     # Go to the 6th byte in the file
    >>> f.read(1)
    '5'
    >>> f.seek(-3, 2) # Go to the 3rd byte before the end
    >>> f.read(1)
    'd'

When you’re done with a file, call ``f.close()`` to close it and free up any system resources taken up by the open file. After calling ``f.close()``, attempts to use the file object will automatically fail.

.. code-block:: pycon

    >>> f.close()
    >>> f.read()
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
    ValueError: I/O operation on closed file

File objects have some additional methods, such as ``isatty()`` and ``truncate()`` which are less frequently used; consult the Library Reference for a complete guide to file objects.


The pickle Module
=================

**NOTE:** The ``pickle`` module isn't available in **Try Python** yet. As soon as file reading / writing works I'll add the pickle module.

Strings can easily be written to and read from a file. Numbers take a bit more effort, since the ``read()`` method only returns strings, which will have to be passed to a function like int(), which takes a string like '123' and returns its numeric value 123. However, when you want to save more complex data types like lists, dictionaries, or class instances, things get a lot more complicated.

Rather than have users be constantly writing and debugging code to save complicated data types, Python provides a standard module called pickle. This is an amazing module that can take almost any Python object (even some forms of Python code!), and convert it to a string representation; this process is called pickling. Reconstructing the object from the string representation is called unpickling. Between pickling and unpickling, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.

If you have an object x, and a file object f that’s been opened for writing, the simplest way to pickle the object takes only one line of code:

pickle.dump(x, f)

To unpickle the object again, if f is a file object which has been opened for reading:

x = pickle.load(f)

(There are other variants of this, used when pickling many objects or when you don’t want to write the pickled data to a file; consult the complete documentation for pickle in the Python Library Reference.)

pickle is the standard way to make Python objects which can be stored and reused by other programs or by a future invocation of the same program; the technical term for this is a persistent object. Because pickle is so widely used, many authors who write Python extensions take care to ensure that new data types such as matrices can be properly pickled and unpickled.

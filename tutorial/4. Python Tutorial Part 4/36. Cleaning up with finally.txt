Defining Clean-up Actions
=========================

The ``try`` statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example:

.. code-block:: pycon

    >>> try:
    ...     raise KeyboardInterrupt
    ... finally:
    ...     print 'Goodbye, world!'
    ...
    Goodbye, world!
    Traceback (most recent call last):
      File "<stdin>", line 2, in ?
    KeyboardInterrupt

A *finally clause* is always executed before leaving the ``try`` statement, whether an exception has occurred or not. When an exception has occurred in the ``try`` clause and has not been handled by an ``except`` clause (or it has occurred in a ``except`` or ``else`` clause), it is re-raised after the ``finally`` clause has been executed. The ``finally`` clause is also executed “on the way out” when any other clause of the ``try`` statement is left via a ``break``, ``continue`` or ``return`` statement. A more complicated example (having ``except`` and ``finally`` clauses in the same try statement works as of Python 2.5):

.. code-block:: pycon

    >>> def divide(x, y):
    ...     try:
    ...         result = x / y
    ...     except ZeroDivisionError:
    ...         print "division by zero!"
    ...     else:
    ...         print "result is", result
    ...     finally:
    ...         print "executing finally clause"
    ...
    >>> divide(2, 1)
    result is 2
    executing finally clause
    >>> divide(2, 0)
    division by zero!
    executing finally clause
    >>> divide("2", "1")
    executing finally clause
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "<stdin>", line 3, in divide
    TypeError: unsupported operand type(s) for /: 'str' and 'str'

As you can see, the ``finally`` clause is executed in any event. The ``TypeError`` raised by dividing two strings is not handled by the ``except`` clause and therefore re-raised after the ``finally`` clause has been executed.

In real world applications, the ``finally`` clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.


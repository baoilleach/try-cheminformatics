Defining Clean-up Actions
=========================

The ``try`` statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example:

.. code-block:: pycon

    >>> try:
    ...     raise KeyboardInterrupt
    ... finally:
    ...     print 'Goodbye, world!'
    ...
    Goodbye, world!
    Traceback (most recent call last):
      File "<stdin>", line 2, in ?
    KeyboardInterrupt

A *finally clause* is always executed before leaving the ``try`` statement, whether an exception has occurred or not. When an exception has occurred in the ``try`` clause and has not been handled by an ``except`` clause (or it has occurred in a ``except`` or ``else`` clause), it is re-raised after the ``finally`` clause has been executed. The ``finally`` clause is also executed “on the way out” when any other clause of the ``try`` statement is left via a ``break``, ``continue`` or ``return`` statement. A more complicated example (having ``except`` and ``finally`` clauses in the same try statement works as of Python 2.5):

.. code-block:: pycon

    >>> def divide(x, y):
    ...     try:
    ...         result = x / y
    ...     except ZeroDivisionError:
    ...         print "division by zero!"
    ...     else:
    ...         print "result is", result
    ...     finally:
    ...         print "executing finally clause"
    ...
    >>> divide(2, 1)
    result is 2
    executing finally clause
    >>> divide(2, 0)
    division by zero!
    executing finally clause
    >>> divide("2", "1")
    executing finally clause
    Traceback (most recent call last):
      File "<stdin>", line 1, in ?
      File "<stdin>", line 3, in divide
    TypeError: unsupported operand type(s) for /: 'str' and 'str'

As you can see, the ``finally`` clause is executed in any event. The ``TypeError`` raised by dividing two strings is not handled by the ``except`` clause and therefore re-raised after the ``finally`` clause has been executed.

In real world applications, the ``finally`` clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.


Predefined Clean-up Actions
===========================

Some objects define standard clean-up actions to be undertaken when the object
is no longer needed, regardless of whether or not the operation using the object
succeeded or failed. Look at the following example, which tries to open a file
and print its contents to the screen.

.. code-block:: pycon

    >>> for line in open("myfile.txt"):
    ...     print line
    ...

The problem with this code is that it leaves the file open for an indeterminate
amount of time after the code has finished executing. This is not an issue in
simple scripts, but can be a problem for larger applications. The ``with``
statement allows objects like files to be used in a way that ensures they are
always cleaned up promptly and correctly.

.. code-block:: pycon

    >>> with open("myfile.txt") as f:
    ...     for line in f:
    ...         print line
    ... 


After the statement is executed, the file f is always closed, even if a problem
was encountered while processing the lines. Other objects which provide
predefined clean-up actions will indicate this in their documentation.
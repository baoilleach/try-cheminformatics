====================================
 Generators & Generator Expressions
====================================

Generators
==========

Generators are a simple and powerful tool for creating iterators. They are written like regular functions but use the yield statement whenever they want to return data. Each time ``next()`` is called, the generator resumes where it left-off (it remembers all the data values and which statement was last executed). An example shows that generators can be trivially easy to create:

.. code-block:: python

    def reverse(data):
        for index in range(len(data)-1, -1, -1):
            yield data[index]

.. code-block:: pycon

    >>> for char in reverse('golf'):
    ...     print char
    ...
    f
    l
    o
    g

Anything that can be done with generators can also be done with class based iterators as described in the previous section. What makes generators so compact is that the ``__iter__()`` and ``next()`` methods are created automatically.

Another key feature is that the local variables and execution state are automatically saved between calls. This made the function easier to write and much more clear than an approach using instance variables like ``self.index`` and ``self.data``.

In addition to automatic method creation and saving program state, when generators terminate, they automatically raise ``StopIteration``. In combination, these features make it easy to create iterators with no more effort than writing a regular function.


Generator Expressions
=====================

Some simple generators can be coded succinctly as expressions using a syntax similar to list comprehensions but with parentheses instead of brackets. These expressions are designed for situations where the generator is used right away by an enclosing function. Generator expressions are more compact but less versatile than full generator definitions and tend to be more memory friendly than equivalent list comprehensions.

Examples:

.. code-block:: pycon

    >>> sum(i*i for i in range(10))                 # sum of squares
    285

.. code-block:: pycon

    >>> xvec = [10, 20, 30]
    >>> yvec = [7, 5, 3]
    >>> sum(x*y for x,y in zip(xvec, yvec))         # dot product
    260

.. code-block:: pycon

    >>> from math import pi, sin
    >>> sine_table = dict((x, sin(x*pi/180)) for x in range(0, 91))

.. code-block:: pycon

    >>> unique_words = set(word  for line in page  for word in line.split())

.. code-block:: pycon

    >>> valedictorian = max((student.gpa, student.name) for student in graduates)

.. code-block:: pycon

    >>> data = 'golf'
    >>> list(data[i] for i in range(len(data)-1,-1,-1))
    ['f', 'l', 'o', 'g']



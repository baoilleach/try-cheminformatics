ref and out parameters
======================

The Python language passes all arguments by-value. There is no syntax to
indicate that an argument should be passed by-reference like there is in
.NET languages like C# and VB.NET via the ``ref`` and ``out`` keywords.
IronPython supports two ways of passing ref or out arguments to a method, an
implicit way and an explicit way. 

In the implicit way, an argument is passed normally to the method call,
and its (potentially) updated value is returned from the method call
along with the normal return value (if any). This composes well with
the Python feature of multiple return values.
`System.Collections.Generic.Dictionary` has a method 
``bool TryGetValue(K key, out value)``.
It can be called from IronPython with just one argument, and the call 
returns a `tuple` where the first element is a boolean and the second element 
is the value (or the default value of 0.0 if the first element is `False`):

.. code-block:: pycon

   >>> d = { "a":100.1, "b":200.2, "c":300.3 }
   >>> from System.Collections.Generic import Dictionary
   >>> d = Dictionary[str, float](d)
   >>> d.TryGetValue("b")
   (True, 200.2)
   >>> d.TryGetValue("z")
   (False, 0.0)

In the explicit way, you can pass an instance of ``clr.Reference[T]`` for the
ref or out argument, and its `Value` field will get set by the call. The
explicit way is useful if there are multiple overloads with ref parameters:

.. code-block:: pycon

   >>> import clr
   >>> r = clr.Reference[float]()
   >>> d.TryGetValue("b", r)
   True
   >>> r.Value
   200.2

Extension methods
=================

Extension methods are currently not natively supported by IronPython. Hence,
they cannot be invoked like instance methods. Instead, they have to be
invoked like static methods.